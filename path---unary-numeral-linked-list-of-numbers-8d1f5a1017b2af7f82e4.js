webpackJsonp([0x7b7c694dba82],{787:function(e,n){e.exports={data:{post:{id:"/home/paul-ssd/Git Repositories/gatsby-starter-personal-blog/content/posts/2017-10-28--unary-numeral-linked-list-of-numbers/index.md absPath of file >>> MarkdownRemark",html:'<blockquote>\n<p>Can numbers really be represented with just sticks and stones? Decimal numbers, negative numbers? What kind of weird ‘stone age’ data structure is this?</p>\n</blockquote>\n<p>In this blog post I will touching on subjects that are rarely discussed. We will be investigating a strange data structure, for learning purposes we will be using sticks and stones.</p>\n<ul>\n<li>Numbers can indeed be represented using sticks and stones *</li>\n<li>All numbers in this strange formation are by definition ‘in order’, no need for sorting algorithms here</li>\n</ul>\n<p><em>* This demonstration only supports decimal values with 1 digit of precision. It is certainly possible to modify this code and leverage the positional nature of the lists to provide additional precision.</em></p>\n<p>Before continuing, I recommend that you fiddle around with the numbers in the following demonstration:</p>\n<iframe src="https://rawgit.com/paulness/UnaryNumeral-DoublyLinkedList/master/representing-numbers-with-rocks-and-sticks-in-react/build/index.html" style="width:100%; height: 1000px; border:0; border-radius: 4px; overflow:scroll;"></iframe>\n<h2>Rules of play</h2>\n<p>Assuming you have fiddled around with the above demonstration you will understand:</p>\n<ul>\n<li>The puddle is zero</li>\n<li>Sticks directly under the puddle represent occurrences of zero in the list</li>\n<li>Rocks directly under the puddle may represent, 0.1, 0.11 etc..</li>\n<li>Upper rocks signify whole numbers</li>\n<li>Lower rocks signify decimal/remaining numbers</li>\n<li>As you move further to the left of the puddle, you are discovering negative numbers</li>\n<li>Sticks represent the existence/occurrence count of numbers</li>\n<li>Rocks without sticks underneath do not represent the occurrence of numbers</li>\n</ul>\n<h2>Getting the numbers back out of the rock formation ‘in order’</h2>\n<p>Simple algorithm described below:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Move from the puddle rock to the first rock on the left\n    If there are &#39;n&#39; stick(s) under that rock, we have a &#39;n&#39; occurrences of -1 so add those to the list of numbers\n    If that rock has rocks underneath, look for the one that has sticks underneath\n    If the third rock has one stick underneath we have found -1.3, so add that to the list of numbers found\netc...\n\nReverse the numbers found so far\n\nTry the puddle\n    If there are 3 sticks under the puddle add 3 occurrences of 0 to the list of numbers found so far\n    If there are 2 rocks under the puddle and 1 stick under those rocks add 0.2 to the list of numbers found so far\n\nMove from the puddle rock to the first rock on the right\n    If there are &#39;n&#39; stick(s) under that rock, we have a &#39;n&#39; occurrences of 1 so add those to the list of numbers\n    If that rock has rocks underneath, look for the one that has sticks underneath\n    If the eleventh rock has one stick underneath we have found one occurrences of 1.11, so add that to the list of numbers found\netc...</code></pre>\n      </div>\n<h2>What kind of data structure is being used here?</h2>\n<p>The data structure being used for this is a doubly linked list representing numbers in unary numeral system. </p>\n<ul>\n<li>The numeric whole number value is determined by the node position from the zero position node</li>\n<li>Each node is capable of starting a new list of decimal nodes</li>\n<li>The numeric remaining/decimal value is also determined by its position from the head node in its own list</li>\n<li>Each node has an occurrence value which is zero by default</li>\n<li>If the occurrence is zero, that number does not exist</li>\n</ul>\n<p>Unary numeral doubly linked list with additional lists for decimal numbers</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Assuming all nodes here have an occurrence count of 1 and the middle node is zero.\n\n[-1.2, 0, 1.1]\n\nis\n\nO&lt;-&gt;O&lt;-&gt;O\n|       |\nO       O\n|\nO</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">UnaryNumeralNode</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> undefined<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> undefined<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>decimalNode <span class="token operator">=</span> undefined<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>occurrenceCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">UnaryDecimalNode</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> undefined<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>occurrenceCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>What is the unary numeral system?</h2>\n<p>The unary numeral system is the simplest numeral system to represent natural numbers. The <a href="https://en.wikipedia.org/wiki/Unary_numeral_system">unary numeral system</a>, is often the first numeric system taught to babies and it was widely used in ancient times. You may use the unary numeric system today in darts, also known as tallying.</p>\n<p>3 is represented as:\n|||</p>\n<p>4 is represented as:\n||||</p>\n<h2>Optimizing this data structure</h2>\n<p>Obviously this data structure is not widely used in computer science. It certainly uses a lot of memory! Adding more and more numbers to the above demonstration, would almost certainly result in a JavaScript heap of memory exception.</p>\n<p>How can we make this more efficient? Please look into skip lists next, to see how you can add a skip to each node in the above tree structure. This would remove the need to add empty nodes in the list purely for positional reasons, thereby alleviating the memory issues.</p>\n<p><a href="http://webdiis.unizar.es/asignaturas/TAP/material/skiptrees.pdf">Academic paper on skip trees by Xavier Messeguer</a></p>\n<p><a href="http://www.geeksforgeeks.org/skip-list/">GeeksForGeeks article on skip lists</a></p>\n<p><a href="https://en.wikipedia.org/wiki/Skip_list">Wikipedia article on skip lists</a></p>\n<h2>Source code</h2>\n<p>You can find the source code for this on my <a href="https://github.com/paulness/UnaryNumeral-DoublyLinkedList">GitHub repository</a></p>',fields:{slug:"/unary-numeral-linked-list-of-numbers/",prefix:"2017-10-28"},frontmatter:{title:"Representing numbers, using sticks and stones.",subTitle:"In this post we will be experimenting with storing a list of numbers in a data structure, underpinned by linked lists. Each number will be determined by it's distance from the puddle (0), sticks will represent the presence of a number. An interactive demonstration built in React JS will allow you to play around with this.",cover:{childImageSharp:{resize:{src:"/static/AdobeStock_80967783-c8ad798b654689ff04b4f2ce724d8961-ada8c.jpeg"}}}}},author:{id:"/home/paul-ssd/Git Repositories/gatsby-starter-personal-blog/content/parts/author.md absPath of file >>> MarkdownRemark",html:"<p><strong>Paul S. Ness</strong> Software engineer with seven years of experience in a variety of industries such travel, payments, medical and publishing.</p>"},footnote:{id:"/home/paul-ssd/Git Repositories/gatsby-starter-personal-blog/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:""},site:{siteMetadata:{facebook:{appId:"445996885830237"}}}},pathContext:{slug:"/unary-numeral-linked-list-of-numbers/"}}}});
//# sourceMappingURL=path---unary-numeral-linked-list-of-numbers-8d1f5a1017b2af7f82e4.js.map