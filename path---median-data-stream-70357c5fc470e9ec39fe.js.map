{"version":3,"sources":["webpack:///path---median-data-stream-70357c5fc470e9ec39fe.js","webpack:///./.cache/json/median-data-stream.json"],"names":["webpackJsonp","797","module","exports","data","post","id","html","fields","slug","prefix","frontmatter","title","subTitle","cover","childImageSharp","resize","src","author","footnote","site","siteMetadata","facebook","appId","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,yGAAAC,KAAA,o1pBAA82LC,QAAq6fC,KAAA,uBAAAC,OAAA,cAAoDC,aAAgBC,MAAA,mCAAAC,SAAA,iFAAAC,OAAgJC,iBAAmBC,QAAUC,IAAA,gFAAqFC,QAAWZ,GAAA,2EAAAC,KAAA,2KAAiQY,UAAab,GAAA,6EAAAC,KAAA,IAA4Fa,MAASC,cAAgBC,UAAYC,MAAA,OAAcC,aAAgBf,KAAA","file":"path---median-data-stream-70357c5fc470e9ec39fe.js","sourcesContent":["webpackJsonp([113719660923176],{\n\n/***/ 797:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/root/project/content/posts/2020-03-15--median-data-stream/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Knowing the median allows you to split data in half equally. It can be very useful when processing data.</p>\\n<p>This <a href=\\\"https://leetcode.com/problems/find-median-from-data-stream/\\\">algorithm from LeetCode</a> is about saving new incoming data in such a way where the median is easily known. There are only two public operations which you must provide.</p>\\n<ul>\\n<li>Ability to add new numbers</li>\\n<li>Ability to find the median</li>\\n</ul>\\n<p>Assume that both operations will be frequent and develop your solution accordingly.</p>\\n<h2>Solution using one max heap and one min heap</h2>\\n<p>Since you need to know the median at any given moment, in this exercise we will use two data structures. One will hold all the values lower than the median and one will store all the values higher than the median. Both data structures must have an equal number of elements or at most 1 element more to handle an odd length array.</p>\\n<p>For the left side of the median, the value we are most interested in is the highest/largest value. This value we need to access frequently. We will use a max heap for this as the largest element is always at the top of the heap.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">  8\\n / \\\\\\n4   5</code></pre>\\n      </div>\\n<p>For the right side of the median, the value we are most interested in is the lowest/smallest value. This value we need to access frequently as well. We will use a min-heap for this as the smallest element is always at the top of the heap.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">  9\\n / \\\\\\n15  11</code></pre>\\n      </div>\\n<p>When we add a number we either will add to the left heap or the right heap. If the value is higher than the top value of the left heap we will add it to the right heap.</p>\\n<p>If we add a number to either heap we must check if we need to rebalance the heap. The heap must be balanced otherwise there is no way to determine the median. To rebalance the heap we do the following</p>\\n<blockquote>\\n<p>If either heap becomes has more than 1 element more than the other, pluck/pop off the top element and move it to the other heap.</p>\\n</blockquote>\\n<h3>An example of the rebalancing</h3>\\n<p>The left tree has become too large</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">    8       9\\n   / \\\\     / \\\\\\n  5   3   15  15\\n / \\\\\\n4   4</code></pre>\\n      </div>\\n<p>After rebalancing the <code class=\\\"language-text\\\">8</code> has been moved to become part of the right tree</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">    5         8\\n   / \\\\       / \\\\\\n  4   3     9  15\\n /         /\\n4         15</code></pre>\\n      </div>\\n<p>Since either side has 4 elements the number that divides all the numbers into equal portions is a number between 5 and 8. We can work this easily <code class=\\\"language-text\\\">(5 + 8) / 2 = 6.5</code></p>\\n<h2>Python code</h2>\\n<p>This code <a href=\\\"https://leetcode.com/submissions/detail/312809894/\\\">passes all tests in Leetcode</a>. It does not go into detail about how max and min heaps work, instead using an inbuilt library <code class=\\\"language-text\\\">heapq</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\nhttps://leetcode.com/problems/find-median-from-data-stream/\\n\\\"\\\"\\\"</span>\\n\\n<span class=\\\"token keyword\\\">import</span> heapq\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MedianFinder</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\" Wrapper for LeetCode solution \\\"\\\"\\\"</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Data structure initialization\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token comment\\\"># Stores values that are less than the median</span>\\n        self<span class=\\\"token punctuation\\\">.</span>left_heap <span class=\\\"token operator\\\">=</span> MaxHeap<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Stores values that are greater than the median</span>\\n        self<span class=\\\"token punctuation\\\">.</span>right_heap <span class=\\\"token operator\\\">=</span> MinHeap<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">addNum</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> num<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Adds the incoming number to the correct underlying data structure\\n        \\\"\\\"\\\"</span>\\n\\n        largest_element_on_left <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">if</span> largest_element_on_left <span class=\\\"token operator\\\">and</span> num <span class=\\\"token operator\\\">&lt;</span> largest_element_on_left<span class=\\\"token punctuation\\\">:</span>\\n            self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>push<span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n            self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>push<span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span>\\n\\n        self<span class=\\\"token punctuation\\\">.</span>_rebalance_heap<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_rebalance_heap</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Neither heap should have more than one element more than the other\\n        This is essential so that the median can be determined\\n        \\\"\\\"\\\"</span>\\n\\n        heap_size_left <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        heap_size_right <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> heap_size_left <span class=\\\"token operator\\\">></span> heap_size_right <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span>\\n            largest_element_on_left <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>pop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>push<span class=\\\"token punctuation\\\">(</span>largest_element_on_left<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">elif</span> heap_size_right <span class=\\\"token operator\\\">></span> heap_size_left <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span>\\n            smallest_element_on_right <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>pop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>push<span class=\\\"token punctuation\\\">(</span>smallest_element_on_right<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">findMedian</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">float</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Gets the median by calculating the value based on the top of each heap\\n        \\\"\\\"\\\"</span>\\n\\n        heap_size_left <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        heap_size_right <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        is_even <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>heap_size_left <span class=\\\"token operator\\\">+</span> heap_size_right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span>\\n        <span class=\\\"token keyword\\\">if</span> is_even<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token comment\\\"># Both sides have equal number of elements</span>\\n            <span class=\\\"token comment\\\"># The median is the mean of the largest element on the left and smallest element on the right</span>\\n            median <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span>\\n        <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token comment\\\"># Whichever heap has 1 extra element that element IS the median!!</span>\\n            median <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">if</span> heap_size_left <span class=\\\"token operator\\\">></span> heap_size_right <span class=\\\"token keyword\\\">else</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> median\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MaxHeapObj</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> self<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">=</span> val\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__lt__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> other<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">></span> other<span class=\\\"token punctuation\\\">.</span>val\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__eq__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> other<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">==</span> other<span class=\\\"token punctuation\\\">.</span>val\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__str__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">str</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>val<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MinHeap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> self<span class=\\\"token punctuation\\\">.</span>h <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> heapq<span class=\\\"token punctuation\\\">.</span>heappush<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">,</span>x<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> heapq<span class=\\\"token punctuation\\\">.</span>heappop<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">peek</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> self<span class=\\\"token punctuation\\\">.</span>h <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">None</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__getitem__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MaxHeap</span><span class=\\\"token punctuation\\\">(</span>MinHeap<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> heapq<span class=\\\"token punctuation\\\">.</span>heappush<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">,</span> MaxHeapObj<span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> heapq<span class=\\\"token punctuation\\\">.</span>heappop<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>val\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">peek</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token keyword\\\">if</span> self<span class=\\\"token punctuation\\\">.</span>h <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">None</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__getitem__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>val\\n</code></pre>\\n      </div>\\n<h3>Code used for debugging and running locally</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\" The entry point of the python script \\\"\\\"\\\"</span>\\n    obj <span class=\\\"token operator\\\">=</span> MedianFinder<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    obj<span class=\\\"token punctuation\\\">.</span>addNum<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">)</span>\\n    obj<span class=\\\"token punctuation\\\">.</span>addNum<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">)</span>\\n    obj<span class=\\\"token punctuation\\\">.</span>addNum<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">17</span><span class=\\\"token punctuation\\\">)</span>\\n    obj<span class=\\\"token punctuation\\\">.</span>addNum<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">)</span>\\n    median <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span>findMedian<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>median<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">\\\"__main__\\\"</span><span class=\\\"token punctuation\\\">:</span>\\n    main<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>Useful learning material</h2>\\n<p><a href=\\\"https://kanaka.github.io/rbt_cfs/trees.html\\\">https://kanaka.github.io/rbt_cfs/trees.html</a>\\n<a href=\\\"https://www.cs.usfca.edu/~galles/visualization/Heap.html\\\">https://www.cs.usfca.edu/~galles/visualization/Heap.html</a>\\n<a href=\\\"https://www.youtube.com/watch?v=1CxyVdA_654\\\">https://www.youtube.com/watch?v=1CxyVdA_654</a></p>\",\"fields\":{\"slug\":\"/median-data-stream/\",\"prefix\":\"2020-03-15\"},\"frontmatter\":{\"title\":\"Find the median in a data stream\",\"subTitle\":\"Adding incoming data in a way that it's optimized to always knowing the median\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/median-in-data-stream-86c9146764f70b35c5bc635d7c812c8a-160fa.png\"}}}}},\"author\":{\"id\":\"/root/project/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Paul S. Ness</strong> Software engineer with ten years of experience in a variety of industries such travel, payments, medical, fine art and publishing.</p>\"},\"footnote\":{\"id\":\"/root/project/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/median-data-stream/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---median-data-stream-70357c5fc470e9ec39fe.js","module.exports = {\"data\":{\"post\":{\"id\":\"/root/project/content/posts/2020-03-15--median-data-stream/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Knowing the median allows you to split data in half equally. It can be very useful when processing data.</p>\\n<p>This <a href=\\\"https://leetcode.com/problems/find-median-from-data-stream/\\\">algorithm from LeetCode</a> is about saving new incoming data in such a way where the median is easily known. There are only two public operations which you must provide.</p>\\n<ul>\\n<li>Ability to add new numbers</li>\\n<li>Ability to find the median</li>\\n</ul>\\n<p>Assume that both operations will be frequent and develop your solution accordingly.</p>\\n<h2>Solution using one max heap and one min heap</h2>\\n<p>Since you need to know the median at any given moment, in this exercise we will use two data structures. One will hold all the values lower than the median and one will store all the values higher than the median. Both data structures must have an equal number of elements or at most 1 element more to handle an odd length array.</p>\\n<p>For the left side of the median, the value we are most interested in is the highest/largest value. This value we need to access frequently. We will use a max heap for this as the largest element is always at the top of the heap.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">  8\\n / \\\\\\n4   5</code></pre>\\n      </div>\\n<p>For the right side of the median, the value we are most interested in is the lowest/smallest value. This value we need to access frequently as well. We will use a min-heap for this as the smallest element is always at the top of the heap.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">  9\\n / \\\\\\n15  11</code></pre>\\n      </div>\\n<p>When we add a number we either will add to the left heap or the right heap. If the value is higher than the top value of the left heap we will add it to the right heap.</p>\\n<p>If we add a number to either heap we must check if we need to rebalance the heap. The heap must be balanced otherwise there is no way to determine the median. To rebalance the heap we do the following</p>\\n<blockquote>\\n<p>If either heap becomes has more than 1 element more than the other, pluck/pop off the top element and move it to the other heap.</p>\\n</blockquote>\\n<h3>An example of the rebalancing</h3>\\n<p>The left tree has become too large</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">    8       9\\n   / \\\\     / \\\\\\n  5   3   15  15\\n / \\\\\\n4   4</code></pre>\\n      </div>\\n<p>After rebalancing the <code class=\\\"language-text\\\">8</code> has been moved to become part of the right tree</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">    5         8\\n   / \\\\       / \\\\\\n  4   3     9  15\\n /         /\\n4         15</code></pre>\\n      </div>\\n<p>Since either side has 4 elements the number that divides all the numbers into equal portions is a number between 5 and 8. We can work this easily <code class=\\\"language-text\\\">(5 + 8) / 2 = 6.5</code></p>\\n<h2>Python code</h2>\\n<p>This code <a href=\\\"https://leetcode.com/submissions/detail/312809894/\\\">passes all tests in Leetcode</a>. It does not go into detail about how max and min heaps work, instead using an inbuilt library <code class=\\\"language-text\\\">heapq</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\nhttps://leetcode.com/problems/find-median-from-data-stream/\\n\\\"\\\"\\\"</span>\\n\\n<span class=\\\"token keyword\\\">import</span> heapq\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MedianFinder</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\" Wrapper for LeetCode solution \\\"\\\"\\\"</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Data structure initialization\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token comment\\\"># Stores values that are less than the median</span>\\n        self<span class=\\\"token punctuation\\\">.</span>left_heap <span class=\\\"token operator\\\">=</span> MaxHeap<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Stores values that are greater than the median</span>\\n        self<span class=\\\"token punctuation\\\">.</span>right_heap <span class=\\\"token operator\\\">=</span> MinHeap<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">addNum</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> num<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Adds the incoming number to the correct underlying data structure\\n        \\\"\\\"\\\"</span>\\n\\n        largest_element_on_left <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">if</span> largest_element_on_left <span class=\\\"token operator\\\">and</span> num <span class=\\\"token operator\\\">&lt;</span> largest_element_on_left<span class=\\\"token punctuation\\\">:</span>\\n            self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>push<span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n            self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>push<span class=\\\"token punctuation\\\">(</span>num<span class=\\\"token punctuation\\\">)</span>\\n\\n        self<span class=\\\"token punctuation\\\">.</span>_rebalance_heap<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_rebalance_heap</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Neither heap should have more than one element more than the other\\n        This is essential so that the median can be determined\\n        \\\"\\\"\\\"</span>\\n\\n        heap_size_left <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        heap_size_right <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> heap_size_left <span class=\\\"token operator\\\">></span> heap_size_right <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span>\\n            largest_element_on_left <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>pop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>push<span class=\\\"token punctuation\\\">(</span>largest_element_on_left<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">elif</span> heap_size_right <span class=\\\"token operator\\\">></span> heap_size_left <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span>\\n            smallest_element_on_right <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>pop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>push<span class=\\\"token punctuation\\\">(</span>smallest_element_on_right<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">findMedian</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">float</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Gets the median by calculating the value based on the top of each heap\\n        \\\"\\\"\\\"</span>\\n\\n        heap_size_left <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        heap_size_right <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n        is_even <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>heap_size_left <span class=\\\"token operator\\\">+</span> heap_size_right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span>\\n        <span class=\\\"token keyword\\\">if</span> is_even<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token comment\\\"># Both sides have equal number of elements</span>\\n            <span class=\\\"token comment\\\"># The median is the mean of the largest element on the left and smallest element on the right</span>\\n            median <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span>\\n        <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token comment\\\"># Whichever heap has 1 extra element that element IS the median!!</span>\\n            median <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>left_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">if</span> heap_size_left <span class=\\\"token operator\\\">></span> heap_size_right <span class=\\\"token keyword\\\">else</span> self<span class=\\\"token punctuation\\\">.</span>right_heap<span class=\\\"token punctuation\\\">.</span>peek<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> median\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MaxHeapObj</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> self<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">=</span> val\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__lt__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> other<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">></span> other<span class=\\\"token punctuation\\\">.</span>val\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__eq__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> other<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">==</span> other<span class=\\\"token punctuation\\\">.</span>val\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__str__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">str</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>val<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MinHeap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> self<span class=\\\"token punctuation\\\">.</span>h <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> heapq<span class=\\\"token punctuation\\\">.</span>heappush<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">,</span>x<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> heapq<span class=\\\"token punctuation\\\">.</span>heappop<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">peek</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> self<span class=\\\"token punctuation\\\">.</span>h <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">None</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__getitem__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MaxHeap</span><span class=\\\"token punctuation\\\">(</span>MinHeap<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> heapq<span class=\\\"token punctuation\\\">.</span>heappush<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">,</span> MaxHeapObj<span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> heapq<span class=\\\"token punctuation\\\">.</span>heappop<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>val\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">peek</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token keyword\\\">if</span> self<span class=\\\"token punctuation\\\">.</span>h <span class=\\\"token keyword\\\">else</span> <span class=\\\"token boolean\\\">None</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__getitem__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>h<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>val\\n</code></pre>\\n      </div>\\n<h3>Code used for debugging and running locally</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\" The entry point of the python script \\\"\\\"\\\"</span>\\n    obj <span class=\\\"token operator\\\">=</span> MedianFinder<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    obj<span class=\\\"token punctuation\\\">.</span>addNum<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">)</span>\\n    obj<span class=\\\"token punctuation\\\">.</span>addNum<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">)</span>\\n    obj<span class=\\\"token punctuation\\\">.</span>addNum<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">17</span><span class=\\\"token punctuation\\\">)</span>\\n    obj<span class=\\\"token punctuation\\\">.</span>addNum<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">)</span>\\n    median <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span>findMedian<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>median<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">\\\"__main__\\\"</span><span class=\\\"token punctuation\\\">:</span>\\n    main<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>Useful learning material</h2>\\n<p><a href=\\\"https://kanaka.github.io/rbt_cfs/trees.html\\\">https://kanaka.github.io/rbt_cfs/trees.html</a>\\n<a href=\\\"https://www.cs.usfca.edu/~galles/visualization/Heap.html\\\">https://www.cs.usfca.edu/~galles/visualization/Heap.html</a>\\n<a href=\\\"https://www.youtube.com/watch?v=1CxyVdA_654\\\">https://www.youtube.com/watch?v=1CxyVdA_654</a></p>\",\"fields\":{\"slug\":\"/median-data-stream/\",\"prefix\":\"2020-03-15\"},\"frontmatter\":{\"title\":\"Find the median in a data stream\",\"subTitle\":\"Adding incoming data in a way that it's optimized to always knowing the median\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/median-in-data-stream-86c9146764f70b35c5bc635d7c812c8a-160fa.png\"}}}}},\"author\":{\"id\":\"/root/project/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Paul S. Ness</strong> Software engineer with ten years of experience in a variety of industries such travel, payments, medical, fine art and publishing.</p>\"},\"footnote\":{\"id\":\"/root/project/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/median-data-stream/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/median-data-stream.json\n// module id = 797\n// module chunks = 113719660923176"],"sourceRoot":""}