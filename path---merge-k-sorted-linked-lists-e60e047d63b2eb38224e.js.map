{"version":3,"sources":["webpack:///path---merge-k-sorted-linked-lists-e60e047d63b2eb38224e.js","webpack:///./.cache/json/merge-k-sorted-linked-lists.json"],"names":["webpackJsonp","792","module","exports","data","post","id","html","fields","slug","prefix","frontmatter","title","subTitle","cover","childImageSharp","resize","src","author","footnote","site","siteMetadata","facebook","appId","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,kHAAAC,KAAA,q6UAAknDC,QAAqySC,KAAA,gCAAAC,OAAA,cAA6DC,aAAgBC,MAAA,8BAAAC,SAAA,6EAAAC,OAAyIC,iBAAmBC,QAAUC,IAAA,sFAA2FC,QAAWZ,GAAA,2EAAAC,KAAA,iKAAuPY,UAAab,GAAA,6EAAAC,KAAA,IAA4Fa,MAASC,cAAgBC,UAAYC,MAAA,OAAcC,aAAgBf,KAAA","file":"path---merge-k-sorted-linked-lists-e60e047d63b2eb38224e.js","sourcesContent":["webpackJsonp([172440904665698],{\n\n/***/ 792:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/root/project/content/posts/2020-03-09--merge-k-sorted-linked-lists/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>A common question interview candidates are asked is to merge k sorted linked lists. This is available for practice on <a href=\\\"https://leetcode.com/problems/merge-k-sorted-lists/\\\">Leetcode</a>.</p>\\n<blockquote>\\n<p><code class=\\\"language-text\\\">k sorted linked lists</code> = just some number of sorted linked lists</p>\\n</blockquote>\\n<h2>Problem description</h2>\\n<p>Given <code class=\\\"language-text\\\">k</code> number of linked lists, create a new single linked list that is ordered. Analyze the time and space complexity.</p>\\n<p>A good solution for time complexity is <code class=\\\"language-text\\\">O(N log k)</code> where <code class=\\\"language-text\\\">O</code> is the number of operations <code class=\\\"language-text\\\">N</code> is the total number of items in the list and <code class=\\\"language-text\\\">k</code> is the number of linked lists. A good solution should also require no additional space/memory other than the memory already used e.g. constant <code class=\\\"language-text\\\">O(1)</code>.</p>\\n<h2>The algorithm</h2>\\n<p>You want to merge the following 3 linked lists </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 -&gt; 2 -&gt; 3 -&gt; 4\\n4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8\\n20</code></pre>\\n      </div>\\n<p>So that you have the following flattened final linked list</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 20</code></pre>\\n      </div>\\n<p>You’ll need to compare the head of each list with each iteration. The head with the smallest value is what you are looking for</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 vs 4 vs 20 = 1\\n2 vs 4 vs 20 = 2\\n4 vs 4 vs 20 = 3\\n4 vs 4 vs 20 = 4\\n4 vs 20 = 4\\n5 vs 20 = 5\\n6 vs 20 = 6\\n7 vs 20 = 7\\n8 vs 20 = 8\\n20 = 20</code></pre>\\n      </div>\\n<h3>Steps</h3>\\n<ol>\\n<li>Evaluate each head node of each input list to find the head with the lowest value</li>\\n<li>Attach this head node to the tail of your flattened output list</li>\\n<li>Make the head of the input list point the next node if one exists otherwise you’ve exhuasted this list. You just remove the node, so that you won’t see it again in the next iteration</li>\\n<li>Repeat until there are no lists with nodes left</li>\\n</ol>\\n<h2>Code</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># Definition for singly-linked list.</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ListNode</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        self<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">=</span> x\\n        self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">None</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Solution</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">mergeKLists</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> lists<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>ListNode<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> ListNode<span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Returns a single sorted list from multiple sorted lists\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token comment\\\"># Ignore empty lists</span>\\n        <span class=\\\"token keyword\\\">if</span> lists<span class=\\\"token punctuation\\\">:</span>\\n            lists <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>l <span class=\\\"token keyword\\\">for</span> l <span class=\\\"token keyword\\\">in</span> lists <span class=\\\"token keyword\\\">if</span> l<span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> lists<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">None</span>\\n\\n        <span class=\\\"token comment\\\"># Get the list which has the lowest value, keep that value for later</span>\\n        list_with_lowest_value <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">min</span><span class=\\\"token punctuation\\\">(</span>lists<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">lambda</span> l<span class=\\\"token punctuation\\\">:</span> l<span class=\\\"token punctuation\\\">.</span>val<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Progress that list to the next value</span>\\n        self<span class=\\\"token punctuation\\\">.</span>_progress_to_next_item_in_list<span class=\\\"token punctuation\\\">(</span>lists<span class=\\\"token operator\\\">=</span>lists<span class=\\\"token punctuation\\\">,</span> item<span class=\\\"token operator\\\">=</span>list_with_lowest_value<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Keep references to the HEAD of the new flattened list and the current</span>\\n        merged_list_head <span class=\\\"token operator\\\">=</span> list_with_lowest_value\\n        merged_list_cur <span class=\\\"token operator\\\">=</span> merged_list_head\\n        \\n        <span class=\\\"token comment\\\"># While at least one input list isn't exhausted</span>\\n        <span class=\\\"token keyword\\\">while</span> lists<span class=\\\"token punctuation\\\">:</span>\\n            list_with_lowest_value <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">min</span><span class=\\\"token punctuation\\\">(</span>lists<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">lambda</span> l<span class=\\\"token punctuation\\\">:</span> l<span class=\\\"token punctuation\\\">.</span>val<span class=\\\"token punctuation\\\">)</span>\\n            merged_list_cur<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span> <span class=\\\"token operator\\\">=</span> list_with_lowest_value\\n            merged_list_cur <span class=\\\"token operator\\\">=</span> merged_list_cur<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span>\\n            self<span class=\\\"token punctuation\\\">.</span>_progress_to_next_item_in_list<span class=\\\"token punctuation\\\">(</span>lists<span class=\\\"token operator\\\">=</span>lists<span class=\\\"token punctuation\\\">,</span> item<span class=\\\"token operator\\\">=</span>list_with_lowest_value<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">return</span> merged_list_head\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_progress_to_next_item_in_list</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> lists<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>ListNode<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> item<span class=\\\"token punctuation\\\">:</span> ListNode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Either changes the list to reference the new item or removes the item from the list if it's at the end\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> item<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span><span class=\\\"token punctuation\\\">:</span>\\n            index <span class=\\\"token operator\\\">=</span> lists<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span>\\n            lists<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> item<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span>\\n        <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n            lists<span class=\\\"token punctuation\\\">.</span>remove<span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span>\\n\\n        \\nsln <span class=\\\"token operator\\\">=</span> Solution<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># test data</span>\\nlist1_item1 <span class=\\\"token operator\\\">=</span> ListNode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">)</span>\\nlist1_item2 <span class=\\\"token operator\\\">=</span> ListNode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span>\\nlist1_item3 <span class=\\\"token operator\\\">=</span> ListNode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span>\\nlist1_item1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span> <span class=\\\"token operator\\\">=</span> list1_item2\\nlist1_item2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span> <span class=\\\"token operator\\\">=</span> list1_item3\\n\\nlist2_item1 <span class=\\\"token operator\\\">=</span> ListNode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># Run application with test data</span>\\nsln<span class=\\\"token punctuation\\\">.</span>mergeKLists<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>list1_item1<span class=\\\"token punctuation\\\">,</span> list2_item1<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>Useful links</h2>\\n<ul>\\n<li><a href=\\\"https://www.youtube.com/watch?v=ptYUCjfNhJY\\\">https://www.youtube.com/watch?v=ptYUCjfNhJY</a></li>\\n<li><a href=\\\"https://medium.com/better-programming/a-gentle-explanation-of-logarithmic-time-complexity-79842728a702\\\">https://medium.com/better-programming/a-gentle-explanation-of-logarithmic-time-complexity-79842728a702</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/merge-k-sorted-linked-lists/\",\"prefix\":\"2020-03-09\"},\"frontmatter\":{\"title\":\"Merge k sorted linked lists\",\"subTitle\":\"Disseminating the \\\"merge k sorted linked lists\\\" problem from Leetcode.com.\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/merge-k-sorted-linked-lists-43c0a4467c06412568a7ae72caecbbc9-160fa.png\"}}}}},\"author\":{\"id\":\"/root/project/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Paul S. Ness</strong> Software engineer with ten years of experience in a variety of industries such travel, payments, medical and publishing.</p>\"},\"footnote\":{\"id\":\"/root/project/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/merge-k-sorted-linked-lists/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---merge-k-sorted-linked-lists-e60e047d63b2eb38224e.js","module.exports = {\"data\":{\"post\":{\"id\":\"/root/project/content/posts/2020-03-09--merge-k-sorted-linked-lists/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>A common question interview candidates are asked is to merge k sorted linked lists. This is available for practice on <a href=\\\"https://leetcode.com/problems/merge-k-sorted-lists/\\\">Leetcode</a>.</p>\\n<blockquote>\\n<p><code class=\\\"language-text\\\">k sorted linked lists</code> = just some number of sorted linked lists</p>\\n</blockquote>\\n<h2>Problem description</h2>\\n<p>Given <code class=\\\"language-text\\\">k</code> number of linked lists, create a new single linked list that is ordered. Analyze the time and space complexity.</p>\\n<p>A good solution for time complexity is <code class=\\\"language-text\\\">O(N log k)</code> where <code class=\\\"language-text\\\">O</code> is the number of operations <code class=\\\"language-text\\\">N</code> is the total number of items in the list and <code class=\\\"language-text\\\">k</code> is the number of linked lists. A good solution should also require no additional space/memory other than the memory already used e.g. constant <code class=\\\"language-text\\\">O(1)</code>.</p>\\n<h2>The algorithm</h2>\\n<p>You want to merge the following 3 linked lists </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 -&gt; 2 -&gt; 3 -&gt; 4\\n4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8\\n20</code></pre>\\n      </div>\\n<p>So that you have the following flattened final linked list</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 20</code></pre>\\n      </div>\\n<p>You’ll need to compare the head of each list with each iteration. The head with the smallest value is what you are looking for</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 vs 4 vs 20 = 1\\n2 vs 4 vs 20 = 2\\n4 vs 4 vs 20 = 3\\n4 vs 4 vs 20 = 4\\n4 vs 20 = 4\\n5 vs 20 = 5\\n6 vs 20 = 6\\n7 vs 20 = 7\\n8 vs 20 = 8\\n20 = 20</code></pre>\\n      </div>\\n<h3>Steps</h3>\\n<ol>\\n<li>Evaluate each head node of each input list to find the head with the lowest value</li>\\n<li>Attach this head node to the tail of your flattened output list</li>\\n<li>Make the head of the input list point the next node if one exists otherwise you’ve exhuasted this list. You just remove the node, so that you won’t see it again in the next iteration</li>\\n<li>Repeat until there are no lists with nodes left</li>\\n</ol>\\n<h2>Code</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># Definition for singly-linked list.</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ListNode</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__init__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        self<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">=</span> x\\n        self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">None</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Solution</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">mergeKLists</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> lists<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>ListNode<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> ListNode<span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Returns a single sorted list from multiple sorted lists\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token comment\\\"># Ignore empty lists</span>\\n        <span class=\\\"token keyword\\\">if</span> lists<span class=\\\"token punctuation\\\">:</span>\\n            lists <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>l <span class=\\\"token keyword\\\">for</span> l <span class=\\\"token keyword\\\">in</span> lists <span class=\\\"token keyword\\\">if</span> l<span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> lists<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">None</span>\\n\\n        <span class=\\\"token comment\\\"># Get the list which has the lowest value, keep that value for later</span>\\n        list_with_lowest_value <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">min</span><span class=\\\"token punctuation\\\">(</span>lists<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">lambda</span> l<span class=\\\"token punctuation\\\">:</span> l<span class=\\\"token punctuation\\\">.</span>val<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Progress that list to the next value</span>\\n        self<span class=\\\"token punctuation\\\">.</span>_progress_to_next_item_in_list<span class=\\\"token punctuation\\\">(</span>lists<span class=\\\"token operator\\\">=</span>lists<span class=\\\"token punctuation\\\">,</span> item<span class=\\\"token operator\\\">=</span>list_with_lowest_value<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Keep references to the HEAD of the new flattened list and the current</span>\\n        merged_list_head <span class=\\\"token operator\\\">=</span> list_with_lowest_value\\n        merged_list_cur <span class=\\\"token operator\\\">=</span> merged_list_head\\n        \\n        <span class=\\\"token comment\\\"># While at least one input list isn't exhausted</span>\\n        <span class=\\\"token keyword\\\">while</span> lists<span class=\\\"token punctuation\\\">:</span>\\n            list_with_lowest_value <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">min</span><span class=\\\"token punctuation\\\">(</span>lists<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">lambda</span> l<span class=\\\"token punctuation\\\">:</span> l<span class=\\\"token punctuation\\\">.</span>val<span class=\\\"token punctuation\\\">)</span>\\n            merged_list_cur<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span> <span class=\\\"token operator\\\">=</span> list_with_lowest_value\\n            merged_list_cur <span class=\\\"token operator\\\">=</span> merged_list_cur<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span>\\n            self<span class=\\\"token punctuation\\\">.</span>_progress_to_next_item_in_list<span class=\\\"token punctuation\\\">(</span>lists<span class=\\\"token operator\\\">=</span>lists<span class=\\\"token punctuation\\\">,</span> item<span class=\\\"token operator\\\">=</span>list_with_lowest_value<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">return</span> merged_list_head\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_progress_to_next_item_in_list</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> lists<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>ListNode<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> item<span class=\\\"token punctuation\\\">:</span> ListNode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Either changes the list to reference the new item or removes the item from the list if it's at the end\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> item<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span><span class=\\\"token punctuation\\\">:</span>\\n            index <span class=\\\"token operator\\\">=</span> lists<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span>\\n            lists<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> item<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span>\\n        <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n            lists<span class=\\\"token punctuation\\\">.</span>remove<span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span>\\n\\n        \\nsln <span class=\\\"token operator\\\">=</span> Solution<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># test data</span>\\nlist1_item1 <span class=\\\"token operator\\\">=</span> ListNode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">)</span>\\nlist1_item2 <span class=\\\"token operator\\\">=</span> ListNode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span>\\nlist1_item3 <span class=\\\"token operator\\\">=</span> ListNode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">)</span>\\nlist1_item1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span> <span class=\\\"token operator\\\">=</span> list1_item2\\nlist1_item2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">next</span> <span class=\\\"token operator\\\">=</span> list1_item3\\n\\nlist2_item1 <span class=\\\"token operator\\\">=</span> ListNode<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># Run application with test data</span>\\nsln<span class=\\\"token punctuation\\\">.</span>mergeKLists<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>list1_item1<span class=\\\"token punctuation\\\">,</span> list2_item1<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>Useful links</h2>\\n<ul>\\n<li><a href=\\\"https://www.youtube.com/watch?v=ptYUCjfNhJY\\\">https://www.youtube.com/watch?v=ptYUCjfNhJY</a></li>\\n<li><a href=\\\"https://medium.com/better-programming/a-gentle-explanation-of-logarithmic-time-complexity-79842728a702\\\">https://medium.com/better-programming/a-gentle-explanation-of-logarithmic-time-complexity-79842728a702</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/merge-k-sorted-linked-lists/\",\"prefix\":\"2020-03-09\"},\"frontmatter\":{\"title\":\"Merge k sorted linked lists\",\"subTitle\":\"Disseminating the \\\"merge k sorted linked lists\\\" problem from Leetcode.com.\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/merge-k-sorted-linked-lists-43c0a4467c06412568a7ae72caecbbc9-160fa.png\"}}}}},\"author\":{\"id\":\"/root/project/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Paul S. Ness</strong> Software engineer with ten years of experience in a variety of industries such travel, payments, medical and publishing.</p>\"},\"footnote\":{\"id\":\"/root/project/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/merge-k-sorted-linked-lists/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/merge-k-sorted-linked-lists.json\n// module id = 792\n// module chunks = 172440904665698"],"sourceRoot":""}