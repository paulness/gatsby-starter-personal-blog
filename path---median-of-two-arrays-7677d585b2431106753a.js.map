{"version":3,"sources":["webpack:///path---median-of-two-arrays-7677d585b2431106753a.js","webpack:///./.cache/json/median-of-two-arrays.json"],"names":["webpackJsonp","798","module","exports","data","post","id","html","fields","slug","prefix","frontmatter","title","subTitle","cover","childImageSharp","resize","src","author","footnote","site","siteMetadata","facebook","appId","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,2GAAAC,KAAA;AAA0+/BC,QAA4lTC,KAAA,yBAAAC,OAAA,cAAsDC,aAAgBC,MAAA,uBAAAC,SAAA,yEAAAC,OAA4HC,iBAAmBC,QAAUC,IAAA,+EAAoFC,QAAWZ,GAAA,2EAAAC,KAAA,2KAAiQY,UAAab,GAAA,6EAAAC,KAAA,IAA4Fa,MAASC,cAAgBC,UAAYC,MAAA,OAAcC,aAAgBf,KAAA","file":"path---median-of-two-arrays-7677d585b2431106753a.js","sourcesContent":["webpackJsonp([173448991608038],{\n\n/***/ 798:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/root/project/content/posts/2020-03-14--median-of-two-arrays/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Did you know that it’s possible to get the median of two separate arrays of different lengths, even or odd, without ever merging them or sorting them? It’s something that is often asked in interviews and is also <a href=\\\"https://leetcode.com/problems/median-of-two-sorted-arrays/\\\">listed on Leetcode.com</a>.</p>\\n<blockquote>\\n<p>Median = the value that splits the array into two equal length partitions</p>\\n</blockquote>\\n<h2>The premise</h2>\\n<p>Given two separate arrays that can have different lengths, overlapping values. There exists a solution to find the median across both arrays without sorting or merging the arrays.</p>\\n<h3>Example 1 - an array that when combined has an odd length of 11</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">small_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">]</span>\\nlarge_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">19</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">25</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The solution should find the same median <code class=\\\"language-text\\\">11</code> as if this array was merged and sorted</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">merged_sorted_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">19</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">25</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>Search for the first two partition points which satisfy the following conditions</p>\\n<ol>\\n<li>All elements to the left of the partition on <code class=\\\"language-text\\\">small_array</code> are smaller or equal to all elements on the right of the partition of <code class=\\\"language-text\\\">large_array</code></li>\\n<li>All elements to the left of the partition on <code class=\\\"language-text\\\">large_array</code> are smaller or equal to all elements on the right of the partition of <code class=\\\"language-text\\\">small_array</code></li>\\n</ol>\\n<p>Since both arrays are ordered in ascending order, checking all elements is unnecessary. The partition that satisfies the above on <code class=\\\"language-text\\\">small_array</code> and <code class=\\\"language-text\\\">large_array</code> is as follows.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 8 9 | 15\\n7 11 | 18 19 21 25</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">9</code> is less than <code class=\\\"language-text\\\">18</code> and <code class=\\\"language-text\\\">11</code> is less than <code class=\\\"language-text\\\">15</code></p>\\n<p>Since the total number of elements in the combined array is odd we simply use the larger of the two numbers to the left of either partition as the median. This is <code class=\\\"language-text\\\">11</code>.</p>\\n<h4>But how you do you find the partition that satisfies the above?</h4>\\n<p>Since the goal of the median is to have an equal number of elements of both arrays on the left as on the right and have the median as the splitting value that divides the array equally.</p>\\n<p>This array is odd, there 6 elements on the left, 5 elements on the right therefore the median has to be one of the numbers on the left. If this number is plucked as the median there will be 5 elements on either side.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 8 9 | 15\\n7 11 | 18 19 21 25</code></pre>\\n      </div>\\n<p>It’s impossible to have partitions of both arrays over to the right and find the median. Therefore it makes no sense to look in for a partition in this search space.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 8 9 | 15\\n7 11 18 19 21 | 25</code></pre>\\n      </div>\\n<p>With this knowledge, it’s possible to ascertain that if you desire to move the <code class=\\\"language-text\\\">small_array</code> partition over to the right. You must move the <code class=\\\"language-text\\\">large_array</code> partition in the opposite direction to the same degree.</p>\\n<h4>Example iterations</h4>\\n<h5>Iteration 1 - incorrect partitions</h5>\\n<ul>\\n<li><code class=\\\"language-text\\\">small_array</code> is partitioned at index <code class=\\\"language-text\\\">2</code> which is decided by the number of elements in the search divided by 2 as a whole number e.g. <code class=\\\"language-text\\\">5 / 2 = 2.5</code> which is just <code class=\\\"language-text\\\">2</code> when the decimal is truncated</li>\\n<li><code class=\\\"language-text\\\">large_array</code> is partitioned at index <code class=\\\"language-text\\\">4</code> which is decided by the total number of elements in both arrays + 1 divided by 2 minus the partition index of the <code class=\\\"language-text\\\">small_array</code> e.g. <code class=\\\"language-text\\\">(11 + 1) / 2 - 2 = 4</code>.</li>\\n</ul>\\n<p>We compare the numbers around the current partition points to decide whether to change these partition points</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 | 8 9 15\\n7 11 18 19 | 21 25</code></pre>\\n      </div>\\n<ul>\\n<li><code class=\\\"language-text\\\">3</code> is not less than <code class=\\\"language-text\\\">21</code>, this correct partition must be in between the higher numbers</li>\\n<li><code class=\\\"language-text\\\">19</code> is not less than <code class=\\\"language-text\\\">8</code>, this correct partition is in the earlier numbers</li>\\n</ul>\\n<h5>Iteration 2 - correct partitions</h5>\\n<p>There were 3 ways of partitioning the <code class=\\\"language-text\\\">small_array</code> in this iteration</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">8 | 9</code></li>\\n<li><code class=\\\"language-text\\\">9 | 15</code></li>\\n<li><code class=\\\"language-text\\\">15 | +∞</code></li>\\n</ul>\\n<p><code class=\\\"language-text\\\">9 | 15</code> was chosen as it’s in the middle. The partition index here is <code class=\\\"language-text\\\">4</code>.</p>\\n<p>However, since we moved the partition on the <code class=\\\"language-text\\\">small_array</code> forward <code class=\\\"language-text\\\">2</code> places from index <code class=\\\"language-text\\\">2</code> to <code class=\\\"language-text\\\">4</code> in this iteration. The partition on the <code class=\\\"language-text\\\">large_array</code> moved <code class=\\\"language-text\\\">2</code> places to the left, to ensure the balance of elements either side of the median.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 8 9 | 15\\n7 11 | 18 19 21 25</code></pre>\\n      </div>\\n<h3>Example 2 - an array that when combined has an even length of 10</h3>\\n<blockquote>\\n<p>In an even array the median is the mean of the two middle numbers</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">small_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">26</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">35</span><span class=\\\"token punctuation\\\">]</span>\\nlarge_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The solution should find the same median <code class=\\\"language-text\\\">13.5</code> derived from <code class=\\\"language-text\\\">(11 + 16) / 2</code> as if this array was merged and sorted</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">merged_sorted_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span>   <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">26</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">35</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The partition points of these arrays are</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">-∞ | 23 26 31 35\\n3 5 7 9 11 | 16</code></pre>\\n      </div>\\n<p>Nothing exists on the left of partition in the <code class=\\\"language-text\\\">small_array</code>, therefore we have substituted this with negative infinity <code class=\\\"language-text\\\">-∞</code>. This effectively means that all values of concern to the median are only in the <code class=\\\"language-text\\\">large_array</code> and we need both a left and right value in this array to compare.</p>\\n<p>We still satisfy the conditions earlier</p>\\n<ol>\\n<li>\\n<p>All elements to the left of the partition on <code class=\\\"language-text\\\">small_array</code> are smaller or equal to all elements on the right of the partition of <code class=\\\"language-text\\\">large_array</code></p>\\n<ol>\\n<li>-∞ is less than all elements</li>\\n</ol>\\n</li>\\n<li>\\n<p>All elements to the left of the partition on <code class=\\\"language-text\\\">large_array</code> are smaller or equal to all elements on the right of the partition of <code class=\\\"language-text\\\">small_array</code></p>\\n<ol>\\n<li>11 is less than 23</li>\\n<li>16 is also less than 23 but we satisfied both conditions already</li>\\n</ol>\\n</li>\\n</ol>\\n<p>Now the next step is to compare the 4 numbers next to the partition points</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>left</th>\\n<th>right</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code class=\\\"language-text\\\">small_array</code></td>\\n<td>-∞</td>\\n<td>23</td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">large_array</code></td>\\n<td>11</td>\\n<td>16</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>We will use the following formula <code class=\\\"language-text\\\">(max(small_array_left_val, large_array_right_val) + min(small_array_right_val, large_array_right_val)) / 2</code> or <code class=\\\"language-text\\\">(11 + 16) / 2 = 13.15</code></p>\\n<h3>Example 3 - an array that when combined has an odd length of 3</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">small_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\nlarge_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>There are only a few ways that tiny arrays can be partitioned and the first way gets the correct result</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>left</th>\\n<th>right</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>small_array</td>\\n<td>-∞</td>\\n<td>3</td>\\n</tr>\\n<tr>\\n<td>large_array</td>\\n<td>-1</td>\\n<td>+∞</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Since the combined array is of an odd length we just use the larger of the two numbers to the left of either partition as the median this is <code class=\\\"language-text\\\">-1</code> as <code class=\\\"language-text\\\">-1 &gt; -∞</code></p>\\n<h3>Example 4 - an array that when combined is all the same value</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">small_array<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\nlarge_array<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The median we know here is <code class=\\\"language-text\\\">1</code> just by looking at it. Since LeetCode asked for only the value and not the index this algorithm takes a few shortcuts and therefore partitions incorrectly and still produces the correct result.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>The top left number is less than or equal to the bottom right number</li>\\n<li>The bottom left number is less than or equal to the top right number</li>\\n<li>The median is one of these four numbers</li>\\n<li>The median is one of the two left numbers as the array is odd and there are more elements on the left</li>\\n<li>The median is the greater of the two left numbers</li>\\n<li>The median is 1</li>\\n</ul>\\n<p>If the LeetCode exercise asked for both the value and the index e.g. <code class=\\\"language-text\\\">(value, index)</code> then this algorithm that we have would fail to deliver the results without adjustments.</p>\\n<h3>Time complexity</h3>\\n<p>Why is this solution of time complexity of <code class=\\\"language-text\\\">O(log(small_array_length))</code>? This is because the smaller array is the only array that we are doing a binary search on and for each search on this array we are halving the search space e.g. <code class=\\\"language-text\\\">8 -&gt; 4 -&gt; 2</code>. You can watch a <a href=\\\"https://www.youtube.com/watch?v=Hatl0qrT0bI\\\">video on logarithmic complexity here</a></p>\\n<h2>Python Code</h2>\\n<p>This code passes <a href=\\\"https://leetcode.com/submissions/detail/312498996/\\\">all tests in LeetCode</a>. Print statements are added for tutorial purposes</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\nhttps://leetcode.com/problems/median-of-two-sorted-arrays/\\n\\\"\\\"\\\"</span>\\n\\n<span class=\\\"token keyword\\\">import</span> sys\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Solution</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n    Wrapper class for Leetcode solution\\n    \\\"\\\"\\\"</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">findMedianSortedArrays</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> nums1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> nums2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">float</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Parameters\\n        ----------\\n        nums1: [int]\\n            A sorted array of numbers\\n        nums2: [int]\\n            A sorted array of numbers\\n\\n        Returns\\n        -------\\n        int\\n            The median number which partitions both arrays if they were already merged and sorted\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> nums1 <span class=\\\"token operator\\\">and</span> <span class=\\\"token operator\\\">not</span> nums2<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">raise</span> <span class=\\\"token string\\\">\\\"Invalid input\\\"</span>\\n\\n        <span class=\\\"token comment\\\"># Single array (trivial algorithm)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> nums1 <span class=\\\"token operator\\\">and</span> nums2<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>_get_median_single_array<span class=\\\"token punctuation\\\">(</span>nums2<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> nums2 <span class=\\\"token operator\\\">and</span> nums1<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>_get_median_single_array<span class=\\\"token punctuation\\\">(</span>nums1<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Get the median for two arrays, smallest array first</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>nums1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>nums2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>_find_median_sorted_arrays<span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token operator\\\">=</span>nums1<span class=\\\"token punctuation\\\">,</span> large_array<span class=\\\"token operator\\\">=</span>nums2<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>_find_median_sorted_arrays<span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token operator\\\">=</span>nums2<span class=\\\"token punctuation\\\">,</span> large_array<span class=\\\"token operator\\\">=</span>nums1<span class=\\\"token punctuation\\\">)</span>\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_find_median_sorted_arrays</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> small_array<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> large_array<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">float</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Time complexity O(log(len(small_array)))\\n\\n        Parameters\\n        ----------\\n        small_array: [int]\\n            A sorted list of integers\\n        large_array: [int]\\n            A sorted list of integers that must be larger or the same length as small_array\\n\\n        Returns\\n        -------\\n        float\\n            The median that splits the two arrays equally as if they were sorted and merged\\n        \\\"\\\"\\\"</span>\\n\\n\\n        total_elements <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>large_array<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Begin the search within the entire range of the smaller array</span>\\n        start_x<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span>\\n        end_x <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>start_x <span class=\\\"token operator\\\">&lt;=</span> end_x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\n            <span class=\\\"token comment\\\"># Try and find the partition points for the x and y array such that an equal number of elements appear on both sides</span>\\n            partition_x <span class=\\\"token operator\\\">=</span> cls<span class=\\\"token punctuation\\\">.</span>_get_partition_x<span class=\\\"token punctuation\\\">(</span>start_x<span class=\\\"token punctuation\\\">,</span> end_x<span class=\\\"token punctuation\\\">)</span>\\n            partition_y <span class=\\\"token operator\\\">=</span> cls<span class=\\\"token punctuation\\\">.</span>_get_partition_y<span class=\\\"token punctuation\\\">(</span>total_elements<span class=\\\"token punctuation\\\">,</span> partition_x<span class=\\\"token punctuation\\\">)</span>\\n\\n            <span class=\\\"token comment\\\"># Find immediate element to the left and to the right of partition_x in the x array</span>\\n            left_val_x <span class=\\\"token operator\\\">=</span> small_array<span class=\\\"token punctuation\\\">[</span>partition_x<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> partition_x <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-</span>sys<span class=\\\"token punctuation\\\">.</span>maxsize\\n            right_val_x <span class=\\\"token operator\\\">=</span> small_array<span class=\\\"token punctuation\\\">[</span>partition_x<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> partition_x <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">else</span> sys<span class=\\\"token punctuation\\\">.</span>maxsize\\n\\n            <span class=\\\"token comment\\\"># Find immediate element to the left and to the right of partitionY in the y array</span>\\n            left_val_y <span class=\\\"token operator\\\">=</span> large_array<span class=\\\"token punctuation\\\">[</span>partition_y<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> partition_y <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-</span>sys<span class=\\\"token punctuation\\\">.</span>maxsize\\n            right_val_y <span class=\\\"token operator\\\">=</span> large_array<span class=\\\"token punctuation\\\">[</span>partition_y<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> partition_y <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>large_array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">else</span> sys<span class=\\\"token punctuation\\\">.</span>maxsize\\n\\n            <span class=\\\"token comment\\\"># All values to the left on the x partition are less or equal to all the values on the right of the y partition</span>\\n            left_x_less_eq_to_right_y <span class=\\\"token operator\\\">=</span> left_val_x <span class=\\\"token operator\\\">&lt;=</span> right_val_y\\n\\n            <span class=\\\"token comment\\\"># All values to the left of the y partition are less or equal to all the values to the right of the x partition</span>\\n            left_y_less_eq_to_right_x <span class=\\\"token operator\\\">=</span> left_val_y <span class=\\\"token operator\\\">&lt;=</span> right_val_x\\n\\n            <span class=\\\"token comment\\\"># Print information about the current state</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"-- INFORMATION---\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"start_x={start_x} end_x={end_x}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"partition_x={partition_x} partitionY={partition_y}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"-----------------\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The 4 values hugging the 2 partition points\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"maxLeftX={left_val_x}   minRightX={right_val_x}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"maxLeftY={left_val_y}   minRightY={right_val_y}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"left_x_less_eq_to_right_y={left_x_less_eq_to_right_y}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"left_y_less_eq_to_right_x={left_y_less_eq_to_right_x}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n            <span class=\\\"token comment\\\"># Partition found where median can be calculated</span>\\n            <span class=\\\"token keyword\\\">if</span> left_x_less_eq_to_right_y <span class=\\\"token operator\\\">and</span> left_y_less_eq_to_right_x<span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"Found the perfect partition indexes. partition_x={partition_x} partitionY={partition_y}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"small_array_left={small_array[0:max(0, partition_x)]} small_array_right={small_array[partition_x::]}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"large_array_left={large_array[0:max(0, partition_y)]} large_array_right={large_array[partition_y::]}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                is_even <span class=\\\"token operator\\\">=</span> total_elements <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span>\\n                <span class=\\\"token keyword\\\">if</span> is_even<span class=\\\"token punctuation\\\">:</span>\\n                    median <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">max</span><span class=\\\"token punctuation\\\">(</span>left_val_x<span class=\\\"token punctuation\\\">,</span> left_val_y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token builtin\\\">min</span><span class=\\\"token punctuation\\\">(</span>right_val_x<span class=\\\"token punctuation\\\">,</span> right_val_y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span>\\n                <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n                    median <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">max</span><span class=\\\"token punctuation\\\">(</span>left_val_x<span class=\\\"token punctuation\\\">,</span> left_val_y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n                <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"Found the perfect median {median}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">return</span> median\\n\\n            <span class=\\\"token comment\\\"># Move search space backward or forward</span>\\n            <span class=\\\"token keyword\\\">if</span> left_val_x <span class=\\\"token operator\\\">></span> right_val_y<span class=\\\"token punctuation\\\">:</span>\\n                end_x <span class=\\\"token operator\\\">=</span> partition_x <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n            <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n                start_x <span class=\\\"token operator\\\">=</span> partition_x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_partition_x</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> start_x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> end_x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Parameters\\n        ----------\\n        start_x: int\\n            The current start_x\\n        end_x: int\\n            The current end_x\\n\\n        Returns\\n        -------\\n        int\\n            The partition index for the x array, if > len(x) then the median of both arrays is in y\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>start_x <span class=\\\"token operator\\\">+</span> end_x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_partition_y</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> total_elements<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> partition_x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Parameters\\n        ----------\\n        total_elements: int\\n            The total number of elements in both arrays\\n        partition_x: int\\n            The current partition_x\\n\\n        Returns\\n        -------\\n        int\\n            The partition point of y\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>total_elements <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> partition_x<span class=\\\"token punctuation\\\">)</span>\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_median_single_array</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> nums<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">list</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">float</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Gets the median of the sorted array\\n\\n        Returns\\n        -------\\n        float\\n            The median number which partitions the array such that both sides have an equal number of elements.\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n\\n        median <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> median<span class=\\\"token punctuation\\\">.</span>is_integer<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token comment\\\"># Odd number then return the middle</span>\\n            <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span>median<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n\\n        <span class=\\\"token comment\\\"># Even so must split</span>\\n        median <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span>median<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">[</span>median<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> nums<span class=\\\"token punctuation\\\">[</span>median<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span>\\n</code></pre>\\n      </div>\\n<h3>Sample run code for experimentation and debugging</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\" The entry point of the Python script \\\"\\\"\\\"</span>\\n\\n    <span class=\\\"token comment\\\"># Trying to find the median of the combined arrays</span>\\n    sln <span class=\\\"token operator\\\">=</span> Solution<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\"># We know the median to this is 11</span>\\n    <span class=\\\"token comment\\\"># print(sln.findMedianSortedArrays(nums1=[1,3,8,9,15], nums2=[7,11,18,19,21,25]))</span>\\n\\n    <span class=\\\"token comment\\\"># We know the median to this is between 11 and 16 so 13.5</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>sln<span class=\\\"token punctuation\\\">.</span>findMedianSortedArrays<span class=\\\"token punctuation\\\">(</span>nums1<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">26</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">35</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> nums2<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\"># The median here is -1</span>\\n    <span class=\\\"token comment\\\">#print(sln.findMedianSortedArrays([3], [-2,-1]))</span>\\n\\n    <span class=\\\"token comment\\\"># The median here is 3</span>\\n    <span class=\\\"token comment\\\">#print(sln.findMedianSortedArrays([1,2,5],[1,3,5,6]))</span>\\n\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">\\\"__main__\\\"</span><span class=\\\"token punctuation\\\">:</span>\\n    main<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>Useful links</h2>\\n<p><a href=\\\"https://www.youtube.com/watch?v=LPFhl65R7ww\\\">https://www.youtube.com/watch?v=LPFhl65R7ww</a></p>\",\"fields\":{\"slug\":\"/median-of-two-arrays/\",\"prefix\":\"2020-03-14\"},\"frontmatter\":{\"title\":\"Median of two arrays\",\"subTitle\":\"Getting the median of two sorted arrays in O(log(small_array_length)).\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/median-of-two-arrays-016298aaedfa95c9693ecf2feccaba60-160fa.png\"}}}}},\"author\":{\"id\":\"/root/project/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Paul S. Ness</strong> Software engineer with ten years of experience in a variety of industries such travel, payments, medical, fine art and publishing.</p>\"},\"footnote\":{\"id\":\"/root/project/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/median-of-two-arrays/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---median-of-two-arrays-7677d585b2431106753a.js","module.exports = {\"data\":{\"post\":{\"id\":\"/root/project/content/posts/2020-03-14--median-of-two-arrays/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Did you know that it’s possible to get the median of two separate arrays of different lengths, even or odd, without ever merging them or sorting them? It’s something that is often asked in interviews and is also <a href=\\\"https://leetcode.com/problems/median-of-two-sorted-arrays/\\\">listed on Leetcode.com</a>.</p>\\n<blockquote>\\n<p>Median = the value that splits the array into two equal length partitions</p>\\n</blockquote>\\n<h2>The premise</h2>\\n<p>Given two separate arrays that can have different lengths, overlapping values. There exists a solution to find the median across both arrays without sorting or merging the arrays.</p>\\n<h3>Example 1 - an array that when combined has an odd length of 11</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">small_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">]</span>\\nlarge_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">19</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">25</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The solution should find the same median <code class=\\\"language-text\\\">11</code> as if this array was merged and sorted</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">merged_sorted_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">18</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">19</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">21</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">25</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>Search for the first two partition points which satisfy the following conditions</p>\\n<ol>\\n<li>All elements to the left of the partition on <code class=\\\"language-text\\\">small_array</code> are smaller or equal to all elements on the right of the partition of <code class=\\\"language-text\\\">large_array</code></li>\\n<li>All elements to the left of the partition on <code class=\\\"language-text\\\">large_array</code> are smaller or equal to all elements on the right of the partition of <code class=\\\"language-text\\\">small_array</code></li>\\n</ol>\\n<p>Since both arrays are ordered in ascending order, checking all elements is unnecessary. The partition that satisfies the above on <code class=\\\"language-text\\\">small_array</code> and <code class=\\\"language-text\\\">large_array</code> is as follows.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 8 9 | 15\\n7 11 | 18 19 21 25</code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">9</code> is less than <code class=\\\"language-text\\\">18</code> and <code class=\\\"language-text\\\">11</code> is less than <code class=\\\"language-text\\\">15</code></p>\\n<p>Since the total number of elements in the combined array is odd we simply use the larger of the two numbers to the left of either partition as the median. This is <code class=\\\"language-text\\\">11</code>.</p>\\n<h4>But how you do you find the partition that satisfies the above?</h4>\\n<p>Since the goal of the median is to have an equal number of elements of both arrays on the left as on the right and have the median as the splitting value that divides the array equally.</p>\\n<p>This array is odd, there 6 elements on the left, 5 elements on the right therefore the median has to be one of the numbers on the left. If this number is plucked as the median there will be 5 elements on either side.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 8 9 | 15\\n7 11 | 18 19 21 25</code></pre>\\n      </div>\\n<p>It’s impossible to have partitions of both arrays over to the right and find the median. Therefore it makes no sense to look in for a partition in this search space.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 8 9 | 15\\n7 11 18 19 21 | 25</code></pre>\\n      </div>\\n<p>With this knowledge, it’s possible to ascertain that if you desire to move the <code class=\\\"language-text\\\">small_array</code> partition over to the right. You must move the <code class=\\\"language-text\\\">large_array</code> partition in the opposite direction to the same degree.</p>\\n<h4>Example iterations</h4>\\n<h5>Iteration 1 - incorrect partitions</h5>\\n<ul>\\n<li><code class=\\\"language-text\\\">small_array</code> is partitioned at index <code class=\\\"language-text\\\">2</code> which is decided by the number of elements in the search divided by 2 as a whole number e.g. <code class=\\\"language-text\\\">5 / 2 = 2.5</code> which is just <code class=\\\"language-text\\\">2</code> when the decimal is truncated</li>\\n<li><code class=\\\"language-text\\\">large_array</code> is partitioned at index <code class=\\\"language-text\\\">4</code> which is decided by the total number of elements in both arrays + 1 divided by 2 minus the partition index of the <code class=\\\"language-text\\\">small_array</code> e.g. <code class=\\\"language-text\\\">(11 + 1) / 2 - 2 = 4</code>.</li>\\n</ul>\\n<p>We compare the numbers around the current partition points to decide whether to change these partition points</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 | 8 9 15\\n7 11 18 19 | 21 25</code></pre>\\n      </div>\\n<ul>\\n<li><code class=\\\"language-text\\\">3</code> is not less than <code class=\\\"language-text\\\">21</code>, this correct partition must be in between the higher numbers</li>\\n<li><code class=\\\"language-text\\\">19</code> is not less than <code class=\\\"language-text\\\">8</code>, this correct partition is in the earlier numbers</li>\\n</ul>\\n<h5>Iteration 2 - correct partitions</h5>\\n<p>There were 3 ways of partitioning the <code class=\\\"language-text\\\">small_array</code> in this iteration</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">8 | 9</code></li>\\n<li><code class=\\\"language-text\\\">9 | 15</code></li>\\n<li><code class=\\\"language-text\\\">15 | +∞</code></li>\\n</ul>\\n<p><code class=\\\"language-text\\\">9 | 15</code> was chosen as it’s in the middle. The partition index here is <code class=\\\"language-text\\\">4</code>.</p>\\n<p>However, since we moved the partition on the <code class=\\\"language-text\\\">small_array</code> forward <code class=\\\"language-text\\\">2</code> places from index <code class=\\\"language-text\\\">2</code> to <code class=\\\"language-text\\\">4</code> in this iteration. The partition on the <code class=\\\"language-text\\\">large_array</code> moved <code class=\\\"language-text\\\">2</code> places to the left, to ensure the balance of elements either side of the median.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">1 3 8 9 | 15\\n7 11 | 18 19 21 25</code></pre>\\n      </div>\\n<h3>Example 2 - an array that when combined has an even length of 10</h3>\\n<blockquote>\\n<p>In an even array the median is the mean of the two middle numbers</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">small_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">26</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">35</span><span class=\\\"token punctuation\\\">]</span>\\nlarge_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The solution should find the same median <code class=\\\"language-text\\\">13.5</code> derived from <code class=\\\"language-text\\\">(11 + 16) / 2</code> as if this array was merged and sorted</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">merged_sorted_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span>   <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">26</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">35</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The partition points of these arrays are</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">-∞ | 23 26 31 35\\n3 5 7 9 11 | 16</code></pre>\\n      </div>\\n<p>Nothing exists on the left of partition in the <code class=\\\"language-text\\\">small_array</code>, therefore we have substituted this with negative infinity <code class=\\\"language-text\\\">-∞</code>. This effectively means that all values of concern to the median are only in the <code class=\\\"language-text\\\">large_array</code> and we need both a left and right value in this array to compare.</p>\\n<p>We still satisfy the conditions earlier</p>\\n<ol>\\n<li>\\n<p>All elements to the left of the partition on <code class=\\\"language-text\\\">small_array</code> are smaller or equal to all elements on the right of the partition of <code class=\\\"language-text\\\">large_array</code></p>\\n<ol>\\n<li>-∞ is less than all elements</li>\\n</ol>\\n</li>\\n<li>\\n<p>All elements to the left of the partition on <code class=\\\"language-text\\\">large_array</code> are smaller or equal to all elements on the right of the partition of <code class=\\\"language-text\\\">small_array</code></p>\\n<ol>\\n<li>11 is less than 23</li>\\n<li>16 is also less than 23 but we satisfied both conditions already</li>\\n</ol>\\n</li>\\n</ol>\\n<p>Now the next step is to compare the 4 numbers next to the partition points</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>left</th>\\n<th>right</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code class=\\\"language-text\\\">small_array</code></td>\\n<td>-∞</td>\\n<td>23</td>\\n</tr>\\n<tr>\\n<td><code class=\\\"language-text\\\">large_array</code></td>\\n<td>11</td>\\n<td>16</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>We will use the following formula <code class=\\\"language-text\\\">(max(small_array_left_val, large_array_right_val) + min(small_array_right_val, large_array_right_val)) / 2</code> or <code class=\\\"language-text\\\">(11 + 16) / 2 = 13.15</code></p>\\n<h3>Example 3 - an array that when combined has an odd length of 3</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">small_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\nlarge_array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>There are only a few ways that tiny arrays can be partitioned and the first way gets the correct result</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>left</th>\\n<th>right</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>small_array</td>\\n<td>-∞</td>\\n<td>3</td>\\n</tr>\\n<tr>\\n<td>large_array</td>\\n<td>-1</td>\\n<td>+∞</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Since the combined array is of an odd length we just use the larger of the two numbers to the left of either partition as the median this is <code class=\\\"language-text\\\">-1</code> as <code class=\\\"language-text\\\">-1 &gt; -∞</code></p>\\n<h3>Example 4 - an array that when combined is all the same value</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">small_array<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\nlarge_array<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>The median we know here is <code class=\\\"language-text\\\">1</code> just by looking at it. Since LeetCode asked for only the value and not the index this algorithm takes a few shortcuts and therefore partitions incorrectly and still produces the correct result.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token number\\\">1</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>The top left number is less than or equal to the bottom right number</li>\\n<li>The bottom left number is less than or equal to the top right number</li>\\n<li>The median is one of these four numbers</li>\\n<li>The median is one of the two left numbers as the array is odd and there are more elements on the left</li>\\n<li>The median is the greater of the two left numbers</li>\\n<li>The median is 1</li>\\n</ul>\\n<p>If the LeetCode exercise asked for both the value and the index e.g. <code class=\\\"language-text\\\">(value, index)</code> then this algorithm that we have would fail to deliver the results without adjustments.</p>\\n<h3>Time complexity</h3>\\n<p>Why is this solution of time complexity of <code class=\\\"language-text\\\">O(log(small_array_length))</code>? This is because the smaller array is the only array that we are doing a binary search on and for each search on this array we are halving the search space e.g. <code class=\\\"language-text\\\">8 -&gt; 4 -&gt; 2</code>. You can watch a <a href=\\\"https://www.youtube.com/watch?v=Hatl0qrT0bI\\\">video on logarithmic complexity here</a></p>\\n<h2>Python Code</h2>\\n<p>This code passes <a href=\\\"https://leetcode.com/submissions/detail/312498996/\\\">all tests in LeetCode</a>. Print statements are added for tutorial purposes</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\nhttps://leetcode.com/problems/median-of-two-sorted-arrays/\\n\\\"\\\"\\\"</span>\\n\\n<span class=\\\"token keyword\\\">import</span> sys\\n\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Solution</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n    Wrapper class for Leetcode solution\\n    \\\"\\\"\\\"</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">findMedianSortedArrays</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> nums1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> nums2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">float</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Parameters\\n        ----------\\n        nums1: [int]\\n            A sorted array of numbers\\n        nums2: [int]\\n            A sorted array of numbers\\n\\n        Returns\\n        -------\\n        int\\n            The median number which partitions both arrays if they were already merged and sorted\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> nums1 <span class=\\\"token operator\\\">and</span> <span class=\\\"token operator\\\">not</span> nums2<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">raise</span> <span class=\\\"token string\\\">\\\"Invalid input\\\"</span>\\n\\n        <span class=\\\"token comment\\\"># Single array (trivial algorithm)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> nums1 <span class=\\\"token operator\\\">and</span> nums2<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>_get_median_single_array<span class=\\\"token punctuation\\\">(</span>nums2<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> nums2 <span class=\\\"token operator\\\">and</span> nums1<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>_get_median_single_array<span class=\\\"token punctuation\\\">(</span>nums1<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Get the median for two arrays, smallest array first</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>nums1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>nums2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>_find_median_sorted_arrays<span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token operator\\\">=</span>nums1<span class=\\\"token punctuation\\\">,</span> large_array<span class=\\\"token operator\\\">=</span>nums2<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> self<span class=\\\"token punctuation\\\">.</span>_find_median_sorted_arrays<span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token operator\\\">=</span>nums2<span class=\\\"token punctuation\\\">,</span> large_array<span class=\\\"token operator\\\">=</span>nums1<span class=\\\"token punctuation\\\">)</span>\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_find_median_sorted_arrays</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> small_array<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> large_array<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">float</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Time complexity O(log(len(small_array)))\\n\\n        Parameters\\n        ----------\\n        small_array: [int]\\n            A sorted list of integers\\n        large_array: [int]\\n            A sorted list of integers that must be larger or the same length as small_array\\n\\n        Returns\\n        -------\\n        float\\n            The median that splits the two arrays equally as if they were sorted and merged\\n        \\\"\\\"\\\"</span>\\n\\n\\n        total_elements <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>large_array<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token comment\\\"># Begin the search within the entire range of the smaller array</span>\\n        start_x<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span>\\n        end_x <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>start_x <span class=\\\"token operator\\\">&lt;=</span> end_x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\n            <span class=\\\"token comment\\\"># Try and find the partition points for the x and y array such that an equal number of elements appear on both sides</span>\\n            partition_x <span class=\\\"token operator\\\">=</span> cls<span class=\\\"token punctuation\\\">.</span>_get_partition_x<span class=\\\"token punctuation\\\">(</span>start_x<span class=\\\"token punctuation\\\">,</span> end_x<span class=\\\"token punctuation\\\">)</span>\\n            partition_y <span class=\\\"token operator\\\">=</span> cls<span class=\\\"token punctuation\\\">.</span>_get_partition_y<span class=\\\"token punctuation\\\">(</span>total_elements<span class=\\\"token punctuation\\\">,</span> partition_x<span class=\\\"token punctuation\\\">)</span>\\n\\n            <span class=\\\"token comment\\\"># Find immediate element to the left and to the right of partition_x in the x array</span>\\n            left_val_x <span class=\\\"token operator\\\">=</span> small_array<span class=\\\"token punctuation\\\">[</span>partition_x<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> partition_x <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-</span>sys<span class=\\\"token punctuation\\\">.</span>maxsize\\n            right_val_x <span class=\\\"token operator\\\">=</span> small_array<span class=\\\"token punctuation\\\">[</span>partition_x<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> partition_x <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>small_array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">else</span> sys<span class=\\\"token punctuation\\\">.</span>maxsize\\n\\n            <span class=\\\"token comment\\\"># Find immediate element to the left and to the right of partitionY in the y array</span>\\n            left_val_y <span class=\\\"token operator\\\">=</span> large_array<span class=\\\"token punctuation\\\">[</span>partition_y<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> partition_y <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token operator\\\">-</span>sys<span class=\\\"token punctuation\\\">.</span>maxsize\\n            right_val_y <span class=\\\"token operator\\\">=</span> large_array<span class=\\\"token punctuation\\\">[</span>partition_y<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token keyword\\\">if</span> partition_y <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>large_array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">else</span> sys<span class=\\\"token punctuation\\\">.</span>maxsize\\n\\n            <span class=\\\"token comment\\\"># All values to the left on the x partition are less or equal to all the values on the right of the y partition</span>\\n            left_x_less_eq_to_right_y <span class=\\\"token operator\\\">=</span> left_val_x <span class=\\\"token operator\\\">&lt;=</span> right_val_y\\n\\n            <span class=\\\"token comment\\\"># All values to the left of the y partition are less or equal to all the values to the right of the x partition</span>\\n            left_y_less_eq_to_right_x <span class=\\\"token operator\\\">=</span> left_val_y <span class=\\\"token operator\\\">&lt;=</span> right_val_x\\n\\n            <span class=\\\"token comment\\\"># Print information about the current state</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"-- INFORMATION---\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"start_x={start_x} end_x={end_x}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"partition_x={partition_x} partitionY={partition_y}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"-----------------\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"The 4 values hugging the 2 partition points\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"maxLeftX={left_val_x}   minRightX={right_val_x}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"maxLeftY={left_val_y}   minRightY={right_val_y}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"left_x_less_eq_to_right_y={left_x_less_eq_to_right_y}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"left_y_less_eq_to_right_x={left_y_less_eq_to_right_x}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n            <span class=\\\"token comment\\\"># Partition found where median can be calculated</span>\\n            <span class=\\\"token keyword\\\">if</span> left_x_less_eq_to_right_y <span class=\\\"token operator\\\">and</span> left_y_less_eq_to_right_x<span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"Found the perfect partition indexes. partition_x={partition_x} partitionY={partition_y}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"small_array_left={small_array[0:max(0, partition_x)]} small_array_right={small_array[partition_x::]}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"large_array_left={large_array[0:max(0, partition_y)]} large_array_right={large_array[partition_y::]}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                is_even <span class=\\\"token operator\\\">=</span> total_elements <span class=\\\"token operator\\\">%</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span>\\n                <span class=\\\"token keyword\\\">if</span> is_even<span class=\\\"token punctuation\\\">:</span>\\n                    median <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">max</span><span class=\\\"token punctuation\\\">(</span>left_val_x<span class=\\\"token punctuation\\\">,</span> left_val_y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token builtin\\\">min</span><span class=\\\"token punctuation\\\">(</span>right_val_x<span class=\\\"token punctuation\\\">,</span> right_val_y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span>\\n                <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n                    median <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">max</span><span class=\\\"token punctuation\\\">(</span>left_val_x<span class=\\\"token punctuation\\\">,</span> left_val_y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n                <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token string\\\">\\\"Found the perfect median {median}\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n                <span class=\\\"token keyword\\\">return</span> median\\n\\n            <span class=\\\"token comment\\\"># Move search space backward or forward</span>\\n            <span class=\\\"token keyword\\\">if</span> left_val_x <span class=\\\"token operator\\\">></span> right_val_y<span class=\\\"token punctuation\\\">:</span>\\n                end_x <span class=\\\"token operator\\\">=</span> partition_x <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n            <span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">:</span>\\n                start_x <span class=\\\"token operator\\\">=</span> partition_x <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_partition_x</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> start_x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> end_x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Parameters\\n        ----------\\n        start_x: int\\n            The current start_x\\n        end_x: int\\n            The current end_x\\n\\n        Returns\\n        -------\\n        int\\n            The partition index for the x array, if > len(x) then the median of both arrays is in y\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>start_x <span class=\\\"token operator\\\">+</span> end_x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_partition_y</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> total_elements<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">,</span> partition_x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Parameters\\n        ----------\\n        total_elements: int\\n            The total number of elements in both arrays\\n        partition_x: int\\n            The current partition_x\\n\\n        Returns\\n        -------\\n        int\\n            The partition point of y\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>total_elements <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> partition_x<span class=\\\"token punctuation\\\">)</span>\\n\\n    @<span class=\\\"token builtin\\\">classmethod</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_get_median_single_array</span><span class=\\\"token punctuation\\\">(</span>cls<span class=\\\"token punctuation\\\">,</span> nums<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">list</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">float</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n        Gets the median of the sorted array\\n\\n        Returns\\n        -------\\n        float\\n            The median number which partitions the array such that both sides have an equal number of elements.\\n        \\\"\\\"\\\"</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\n\\n        median <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token operator\\\">not</span> median<span class=\\\"token punctuation\\\">.</span>is_integer<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token comment\\\"># Odd number then return the middle</span>\\n            <span class=\\\"token keyword\\\">return</span> nums<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span>median<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span>\\n\\n        <span class=\\\"token comment\\\"># Even so must split</span>\\n        median <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">(</span>median<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>nums<span class=\\\"token punctuation\\\">[</span>median<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> nums<span class=\\\"token punctuation\\\">[</span>median<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span>\\n</code></pre>\\n      </div>\\n<h3>Sample run code for experimentation and debugging</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\" The entry point of the Python script \\\"\\\"\\\"</span>\\n\\n    <span class=\\\"token comment\\\"># Trying to find the median of the combined arrays</span>\\n    sln <span class=\\\"token operator\\\">=</span> Solution<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\"># We know the median to this is 11</span>\\n    <span class=\\\"token comment\\\"># print(sln.findMedianSortedArrays(nums1=[1,3,8,9,15], nums2=[7,11,18,19,21,25]))</span>\\n\\n    <span class=\\\"token comment\\\"># We know the median to this is between 11 and 16 so 13.5</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>sln<span class=\\\"token punctuation\\\">.</span>findMedianSortedArrays<span class=\\\"token punctuation\\\">(</span>nums1<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">23</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">26</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">31</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">35</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> nums2<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">11</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token comment\\\"># The median here is -1</span>\\n    <span class=\\\"token comment\\\">#print(sln.findMedianSortedArrays([3], [-2,-1]))</span>\\n\\n    <span class=\\\"token comment\\\"># The median here is 3</span>\\n    <span class=\\\"token comment\\\">#print(sln.findMedianSortedArrays([1,2,5],[1,3,5,6]))</span>\\n\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">\\\"__main__\\\"</span><span class=\\\"token punctuation\\\">:</span>\\n    main<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h2>Useful links</h2>\\n<p><a href=\\\"https://www.youtube.com/watch?v=LPFhl65R7ww\\\">https://www.youtube.com/watch?v=LPFhl65R7ww</a></p>\",\"fields\":{\"slug\":\"/median-of-two-arrays/\",\"prefix\":\"2020-03-14\"},\"frontmatter\":{\"title\":\"Median of two arrays\",\"subTitle\":\"Getting the median of two sorted arrays in O(log(small_array_length)).\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/median-of-two-arrays-016298aaedfa95c9693ecf2feccaba60-160fa.png\"}}}}},\"author\":{\"id\":\"/root/project/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Paul S. Ness</strong> Software engineer with ten years of experience in a variety of industries such travel, payments, medical, fine art and publishing.</p>\"},\"footnote\":{\"id\":\"/root/project/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/median-of-two-arrays/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/median-of-two-arrays.json\n// module id = 798\n// module chunks = 173448991608038"],"sourceRoot":""}