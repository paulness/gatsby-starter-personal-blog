{"version":3,"sources":["webpack:///path---autocomplete-with-static-files-part-2-c0ad56fc798d03e07bf9.js","webpack:///./.cache/json/autocomplete-with-static-files-part-2.json"],"names":["webpackJsonp","784","module","exports","data","post","id","html","fields","slug","prefix","frontmatter","title","subTitle","cover","childImageSharp","resize","src","author","footnote","site","siteMetadata","facebook","appId","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,4HAAAC,KAAA,kkDAAgvCC,QAAsfC,KAAA,0CAAAC,OAAA,cAAuEC,aAAgBC,MAAA,0EAAAC,SAAA,yNAAAC,OAA+TC,iBAAmBC,QAAUC,IAAA,+DAAoEC,QAAWZ,GAAA,2EAAAC,KAAA,iKAAuPY,UAAab,GAAA,6EAAAC,KAAA,IAA4Fa,MAASC,cAAgBC,UAAYC,MAAA,OAAcC,aAAgBf,KAAA","file":"path---autocomplete-with-static-files-part-2-c0ad56fc798d03e07bf9.js","sourcesContent":["webpackJsonp([187893217791726],{\n\n/***/ 784:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/root/project/content/posts/2017-11-21--autocomplete-with-static-files-part-2/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This post allows you to visualize how autocomplete data would be arranged within a Prefix Trie data structure. If you would like an introduction to Trie data structures before continuing, please check out <a href=\\\"https://medium.freecodecamp.org/trie-prefix-tree-algorithm-ee7ab3fe3413\\\">Julia’s article on Medium</a>.</p>\\n<h3>Using the visualization</h3>\\n<ul>\\n<li>The words can be changed on the fly; this will adjust the Trie diagram</li>\\n<li>Sentences may be used instead of words</li>\\n<li>The letters constituting each of the words are represented in the tree as nodes</li>\\n<li>The end of each full word is marked on the node with the text “endWord”</li>\\n<li>\\n<p>Clicking on any of the nodes will trace down from that node. You will be shown the words and have an option to download them.</p>\\n<ul>\\n<li><em>This is the basis; we will expand on when we implement our autocomplete static file generator</em></li>\\n</ul>\\n</li>\\n</ul>\\n<iframe src=\\\"https://rawgit.com/paulness/AutocompletePrefixTrieReact/master/build/index.html\\\" style=\\\"width:100%; height:1000px; border:0; border-radius: 4px; overflow:hidden;\\\"></iframe>\\n<h3>Source code</h3>\\n<p>I created this visualization with the React framework, to the availability of <a href=\\\"http://www.reactd3.org\\\">ReactD3</a> and <a href=\\\"https://www.npmjs.com/package/react-d3-tree\\\">ReactD3 Tree</a>.</p>\\n<p><a href=\\\"https://codesandbox.io/s/vqj8v17875\\\"><img src=\\\"https://codesandbox.io/static/img/play-codesandbox.svg\\\" alt=\\\"Edit on CodeSandbox\\\"></a>\\n<a href=\\\"https://github.com/paulness/AutocompletePrefixTrieReact\\\">Edit on GitHub</a></p>\",\"fields\":{\"slug\":\"/autocomplete-with-static-files-part-2/\",\"prefix\":\"2017-11-21\"},\"frontmatter\":{\"title\":\"Autocomplete with static files [2/4] - Visualization of words in a Trie\",\"subTitle\":\"An interactive visualization of how to implement autocomplete without a backend server, using only static files. This post will help with understanding the underpinnings of autocomplete using a Trie data structure.\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/json-b06de762a3418266f5bdc42e97c352ab-160fa.png\"}}}}},\"author\":{\"id\":\"/root/project/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Paul S. Ness</strong> Software engineer with ten years of experience in a variety of industries such travel, payments, medical and publishing.</p>\"},\"footnote\":{\"id\":\"/root/project/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/autocomplete-with-static-files-part-2/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---autocomplete-with-static-files-part-2-c0ad56fc798d03e07bf9.js","module.exports = {\"data\":{\"post\":{\"id\":\"/root/project/content/posts/2017-11-21--autocomplete-with-static-files-part-2/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This post allows you to visualize how autocomplete data would be arranged within a Prefix Trie data structure. If you would like an introduction to Trie data structures before continuing, please check out <a href=\\\"https://medium.freecodecamp.org/trie-prefix-tree-algorithm-ee7ab3fe3413\\\">Julia’s article on Medium</a>.</p>\\n<h3>Using the visualization</h3>\\n<ul>\\n<li>The words can be changed on the fly; this will adjust the Trie diagram</li>\\n<li>Sentences may be used instead of words</li>\\n<li>The letters constituting each of the words are represented in the tree as nodes</li>\\n<li>The end of each full word is marked on the node with the text “endWord”</li>\\n<li>\\n<p>Clicking on any of the nodes will trace down from that node. You will be shown the words and have an option to download them.</p>\\n<ul>\\n<li><em>This is the basis; we will expand on when we implement our autocomplete static file generator</em></li>\\n</ul>\\n</li>\\n</ul>\\n<iframe src=\\\"https://rawgit.com/paulness/AutocompletePrefixTrieReact/master/build/index.html\\\" style=\\\"width:100%; height:1000px; border:0; border-radius: 4px; overflow:hidden;\\\"></iframe>\\n<h3>Source code</h3>\\n<p>I created this visualization with the React framework, to the availability of <a href=\\\"http://www.reactd3.org\\\">ReactD3</a> and <a href=\\\"https://www.npmjs.com/package/react-d3-tree\\\">ReactD3 Tree</a>.</p>\\n<p><a href=\\\"https://codesandbox.io/s/vqj8v17875\\\"><img src=\\\"https://codesandbox.io/static/img/play-codesandbox.svg\\\" alt=\\\"Edit on CodeSandbox\\\"></a>\\n<a href=\\\"https://github.com/paulness/AutocompletePrefixTrieReact\\\">Edit on GitHub</a></p>\",\"fields\":{\"slug\":\"/autocomplete-with-static-files-part-2/\",\"prefix\":\"2017-11-21\"},\"frontmatter\":{\"title\":\"Autocomplete with static files [2/4] - Visualization of words in a Trie\",\"subTitle\":\"An interactive visualization of how to implement autocomplete without a backend server, using only static files. This post will help with understanding the underpinnings of autocomplete using a Trie data structure.\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/json-b06de762a3418266f5bdc42e97c352ab-160fa.png\"}}}}},\"author\":{\"id\":\"/root/project/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Paul S. Ness</strong> Software engineer with ten years of experience in a variety of industries such travel, payments, medical and publishing.</p>\"},\"footnote\":{\"id\":\"/root/project/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/autocomplete-with-static-files-part-2/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/autocomplete-with-static-files-part-2.json\n// module id = 784\n// module chunks = 187893217791726"],"sourceRoot":""}