webpackJsonp([0x9cd586de0a62],{794:function(n,s){n.exports={data:{post:{id:"/root/project/content/posts/2020-03-09--merge-k-sorted-linked-lists/index.md absPath of file >>> MarkdownRemark",html:'<p>A common question interview candidates are asked is to merge k sorted linked lists. This is available for practice on <a href="https://leetcode.com/problems/merge-k-sorted-lists/">Leetcode</a>.</p>\n<blockquote>\n<p><code class="language-text">k sorted linked lists</code> = just some number of sorted linked lists</p>\n</blockquote>\n<h2>Problem description</h2>\n<p>Given <code class="language-text">k</code> number of linked lists, create a new single linked list that is ordered. Analyze the time and space complexity.</p>\n<p>A good solution for time complexity is <code class="language-text">O(N log k)</code> where <code class="language-text">O</code> is the number of operations <code class="language-text">N</code> is the total number of items in the list and <code class="language-text">k</code> is the number of linked lists. A good solution should also require no additional space/memory other than the memory already used e.g. constant <code class="language-text">O(1)</code>.</p>\n<h2>The algorithm</h2>\n<p>You want to merge the following 3 linked lists, <code class="language-text">list1</code>, <code class="language-text">list2</code> and <code class="language-text">list3</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">2 -&gt; 3 -&gt; 4 -&gt; 5\n4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8\n20</code></pre>\n      </div>\n<p>So that you have the following flattened final linked list</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">2 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 5 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 20</code></pre>\n      </div>\n<p>As you construct the newly merged linked list you’ll be moving through the existing linked lists. Once an item has been added to the merged list there is no reason to return to this item. Therefore updating the head of the list as we construct a new merged list is an acceptable approach.</p>\n<blockquote>\n<p>With each iteration, 1 item from the front of <code class="language-text">list1</code> or <code class="language-text">list2</code> or <code class="language-text">list3</code> will be plucked</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><code class="language-text">list1</code></th>\n<th><code class="language-text">list2</code></th>\n<th><code class="language-text">list3</code></th>\n<th><code class="language-text">lowest_value</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>4</td>\n<td>20</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>4</td>\n<td>20</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n<td>20</td>\n<td>4 (from \n<code class="language-text">list1</code>\n)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4</td>\n<td>20</td>\n<td>4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td>20</td>\n<td>5 (from \n<code class="language-text">list1</code>\n)</td>\n</tr>\n<tr>\n<td></td>\n<td>5</td>\n<td>20</td>\n<td>5</td>\n</tr>\n<tr>\n<td></td>\n<td>6</td>\n<td>20</td>\n<td>6</td>\n</tr>\n<tr>\n<td></td>\n<td>7</td>\n<td>20</td>\n<td>7</td>\n</tr>\n<tr>\n<td></td>\n<td>8</td>\n<td>20</td>\n<td>8</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>20</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<h3>Steps</h3>\n<ol>\n<li>Evaluate each head node of each input list to find the head with the lowest value</li>\n<li>Attach this head node to the tail of your flattened output list</li>\n<li>Make the head of the input list point the next node if one exists otherwise you’ve exhuasted this list. You just remove the node, so that you won’t see it again in the next iteration</li>\n<li>Repeat until there are no lists with nodes left</li>\n</ol>\n<h2>Python Code</h2>\n<p>This code <a href="https://leetcode.com/submissions/detail/312326148/">passes all tests in LeetCode</a>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token triple-quoted-string string">"""\nhttps://leetcode.com/problems/merge-k-sorted-lists/\n"""</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""\n    Basic data structure for a singly-linked list.\n    """</span>\n\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x\n        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""\n    Wrapper class for LeetCode solution\n    """</span>\n\n    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">:</span> <span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">"""\n        Parameters\n        ----------\n        lists: list of ListNode\n            Multiple linked lists, each can be traversed using the next property\n\n        Returns\n        -------\n        ListNode\n            The head of a newly constructed ordered and flattened linked list\n        """</span>\n\n        <span class="token keyword">if</span> lists<span class="token punctuation">:</span>\n            lists <span class="token operator">=</span> <span class="token punctuation">[</span>l <span class="token keyword">for</span> l <span class="token keyword">in</span> lists <span class="token keyword">if</span> l<span class="token punctuation">]</span>\n\n        <span class="token keyword">if</span> <span class="token operator">not</span> lists<span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token boolean">None</span>\n\n        <span class="token comment"># Setup the head of the new ordered merged linked list</span>\n        list_with_lowest_value <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> l<span class="token punctuation">:</span> l<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>_update_list_head<span class="token punctuation">(</span>lists<span class="token operator">=</span>lists<span class="token punctuation">,</span> head_to_update<span class="token operator">=</span>list_with_lowest_value<span class="token punctuation">)</span>\n        merged_list_head <span class="token operator">=</span> list_with_lowest_value\n        merged_list_cur <span class="token operator">=</span> merged_list_head\n\n        <span class="token comment"># Build new ordered merged linked list</span>\n        <span class="token keyword">while</span> lists<span class="token punctuation">:</span>\n            list_with_lowest_value <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> l<span class="token punctuation">:</span> l<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n            merged_list_cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list_with_lowest_value\n            merged_list_cur <span class="token operator">=</span> merged_list_cur<span class="token punctuation">.</span><span class="token builtin">next</span>\n            self<span class="token punctuation">.</span>_update_list_head<span class="token punctuation">(</span>lists<span class="token operator">=</span>lists<span class="token punctuation">,</span> head_to_update<span class="token operator">=</span>list_with_lowest_value<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> merged_list_head\n\n    @<span class="token builtin">classmethod</span>\n    <span class="token keyword">def</span> <span class="token function">_update_list_head</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> lists<span class="token punctuation">:</span> <span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> head_to_update<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">"""\n        Updates the head reference of one list to the next item in that list\n        """</span>\n\n        <span class="token keyword">if</span> head_to_update<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>\n            index <span class="token operator">=</span> lists<span class="token punctuation">.</span>index<span class="token punctuation">(</span>head_to_update<span class="token punctuation">)</span>\n            lists<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> head_to_update<span class="token punctuation">.</span><span class="token builtin">next</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            lists<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>head_to_update<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h3>Sample run code for experimentation and debugging</h3>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">""" The entry point of the python script """</span>\n\n    sln <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># Test data 2 linked lists</span>\n    list1_item1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>\n    list1_item2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>\n    list1_item3 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>\n    list1_item1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list1_item2\n    list1_item2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list1_item3\n\n    list2_item1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># Print out the flattened linked list</span>\n    merged_list <span class="token operator">=</span> sln<span class="token punctuation">.</span>mergeKLists<span class="token punctuation">(</span><span class="token punctuation">[</span>list1_item1<span class="token punctuation">,</span> list2_item1<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>merged_list <span class="token operator">and</span> merged_list<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>merged_list<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n        merged_list <span class="token operator">=</span> merged_list<span class="token punctuation">.</span><span class="token builtin">next</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    main<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2>Useful links</h2>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=ptYUCjfNhJY">https://www.youtube.com/watch?v=ptYUCjfNhJY</a></li>\n<li><a href="https://medium.com/better-programming/a-gentle-explanation-of-logarithmic-time-complexity-79842728a702">https://medium.com/better-programming/a-gentle-explanation-of-logarithmic-time-complexity-79842728a702</a></li>\n</ul>',fields:{slug:"/merge-k-sorted-linked-lists/",prefix:"2020-03-09"},frontmatter:{title:"Merge k sorted linked lists",subTitle:'Disseminating the "merge k sorted linked lists" problem from Leetcode.com.',cover:{childImageSharp:{resize:{src:"/static/merge-k-sorted-linked-lists-43c0a4467c06412568a7ae72caecbbc9-160fa.png"}}}}},author:{id:"/root/project/content/parts/author.md absPath of file >>> MarkdownRemark",html:"<p><strong>Paul S. Ness</strong> Software engineer with ten years of experience in a variety of industries such travel, payments, medical, fine art and publishing.</p>"},footnote:{id:"/root/project/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:""},site:{siteMetadata:{facebook:{appId:""}}}},pathContext:{slug:"/merge-k-sorted-linked-lists/"}}}});
//# sourceMappingURL=path---merge-k-sorted-linked-lists-1c374f2600f407ea8fa3.js.map